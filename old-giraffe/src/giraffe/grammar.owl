#using owl.v4
program = top*
top =
  func-def : func-def
  struct-def : struct-def
func-def =
  attrs? ty@ret identifier@name [ '(' (func-arg (',' func-arg)*)? ','? ')' ] block
struct-def =
  attrs? 'struct' identifier@name '{' struct-member (',' struct-member)* ','? '}' : struct-def
struct-member =
  attrs? ty@ty identifier@name
func-arg =
  attrs? func-arg-kind? ty@ty identifier@name
func-arg-kind =
  'mut' : mut-kind
attrs =
  '[' attr (',' attr)* ']'
attr =
  identifier : attr-name
.operators postfix
  [ '(' (literal (',' literal)*)? ','? ')' ] : func-call
block =
  '{' stmt* '}'
stmt =
  ty identifier@name ('=' expr)? ';' : var-decl
  'return' expr ';' : return-stmt
  expr ';' : expr-stmt
ty =
  identifier : named-ty
call-arg =
  (identifier ':')? expr
expr =
  [ '(' expr ')' ] : parens
  path : variable
  literal : literal
.operators postfix
  [ '(' (call-arg (',' call-arg)*)? ','? ')' ] : func-call
.operators postfix
  '.' identifier : access
.operators prefix
  '-' : negative
.operators infix left
  '*' : times
  '/' : divided-by
.operators infix left
  '+' : plus
  '-' : minus
.operators infix left
  '<-' : write
literal =
  string : string-literal
  number : int-literal
