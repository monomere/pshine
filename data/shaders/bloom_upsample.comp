#version 460
#extension GL_ARB_shading_language_include: enable
#pragma shader_stage(compute)
#include "common.glsl"

// layout (constant_id = 0) const bool IS_FIRST_UPSAMPLE = false;
layout (set = 0, binding = 0) uniform sampler2D i_tex;
layout (set = 0, binding = 1, rgba16f) uniform image2D o_tex;

layout (push_constant) uniform BUFFER(GraphicsSettingsConsts, u_consts);

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

vec3 sample_3x3_tent(vec2 uv) {
	vec2 o = vec2(1.0, 1.0) / vec2(textureSize(i_tex, 0));
	vec3 a = texture(i_tex, uv + vec2(-o.x,  o.y)).rgb;
	vec3 b = texture(i_tex, uv + vec2(   0,  o.y)).rgb;
	vec3 c = texture(i_tex, uv + vec2( o.x,  o.y)).rgb;
	vec3 d = texture(i_tex, uv + vec2(-o.x,    0)).rgb;
	vec3 e = texture(i_tex, uv + vec2(   0,    0)).rgb;
	vec3 f = texture(i_tex, uv + vec2( o.x,    0)).rgb;
	vec3 g = texture(i_tex, uv + vec2(-o.x, -o.y)).rgb;
	vec3 h = texture(i_tex, uv + vec2(   0, -o.y)).rgb;
	vec3 i = texture(i_tex, uv + vec2( o.x, -o.y)).rgb;

	vec3 r = e * 0.25;
	r += (b + d + f + h) * 0.125;
	r += (a + c + g + i) * 0.0625;
	return r;
}

void main() {
	ivec2 ires = textureSize(i_tex, 0);
	ivec2 ores = imageSize(o_tex);

	ivec2 opos = ivec2(gl_GlobalInvocationID.xy);
	if (any(greaterThanEqual(opos, ores))) return;

	vec2 uv = (vec2(opos) + vec2(0.5)) / vec2(ores);
	vec3 src = sample_3x3_tent(uv);
	imageStore(o_tex, opos, vec4(imageLoad(o_tex, opos).rgb + src, 1.0));
}
