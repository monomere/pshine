#version 460
#extension GL_ARB_shading_language_include: enable
#pragma shader_stage(compute)
#include "common.glsl"

// layout (constant_id = 0) const bool IS_FIRST_UPSAMPLE = false;
layout (set = 0, binding = 0) uniform sampler2D i_tex;
layout (set = 0, binding = 1, rgba16f) uniform writeonly image2D o_tex;
// layout (push_constant) uniform BUFFER(UpsampleBlurPushConstants, push_consts);

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

// For downsampling, maybe will use later.
vec3 sample_13_tap(vec2 uv) {
	vec3 a = textureOffset(i_tex, uv, ivec2(-2,  2)).rgb;
	vec3 b = textureOffset(i_tex, uv, ivec2( 0,  2)).rgb;
	vec3 c = textureOffset(i_tex, uv, ivec2( 2,  2)).rgb;
	vec3 d = textureOffset(i_tex, uv, ivec2(-2,  0)).rgb;
	vec3 e = textureOffset(i_tex, uv, ivec2( 0,  0)).rgb;
	vec3 f = textureOffset(i_tex, uv, ivec2( 2,  0)).rgb;
	vec3 g = textureOffset(i_tex, uv, ivec2(-2, -2)).rgb;
	vec3 h = textureOffset(i_tex, uv, ivec2( 0, -2)).rgb;
	vec3 i = textureOffset(i_tex, uv, ivec2( 2, -2)).rgb;
	vec3 j = textureOffset(i_tex, uv, ivec2(-1,  1)).rgb;
	vec3 k = textureOffset(i_tex, uv, ivec2( 1,  1)).rgb;
	vec3 l = textureOffset(i_tex, uv, ivec2(-1, -1)).rgb;
	vec3 m = textureOffset(i_tex, uv, ivec2( 1, -1)).rgb;
	vec3 v = (a + c + g + i) * 0.03125;
	v += (b + d + f + h) * 0.0625;
	v += (e + j + k + l + m) * 0.125;
	return v;
}

vec3 sample_3x3_tent(vec2 uv) {
	vec3 a = textureOffset(i_tex, uv, ivec2(-1,  1)).rgb;
	vec3 b = textureOffset(i_tex, uv, ivec2( 0,  1)).rgb;
	vec3 c = textureOffset(i_tex, uv, ivec2( 1,  1)).rgb;
	vec3 d = textureOffset(i_tex, uv, ivec2(-1,  0)).rgb;
	vec3 e = textureOffset(i_tex, uv, ivec2( 0,  0)).rgb;
	vec3 f = textureOffset(i_tex, uv, ivec2( 1,  0)).rgb;
	vec3 g = textureOffset(i_tex, uv, ivec2(-1, -1)).rgb;
	vec3 h = textureOffset(i_tex, uv, ivec2( 0, -1)).rgb;
	vec3 i = textureOffset(i_tex, uv, ivec2( 1, -1)).rgb;

	vec3 r = e * 0.25;
	d += (b + d + f + h) * 0.125;
	d += (a + c + g + i) * 0.0625;
	return d;
}

float luma_from_rgb(vec3 rgb) {
	return 0.2126 * rgb.r + 0.7152 * rgb.g + 0.0722 * rgb.b;
}

void main() {
	ivec2 ires = textureSize(i_tex, 0);
	ivec2 ores = imageSize(o_tex);

	ivec2 ipos = ivec2(gl_GlobalInvocationID.xy);
	if (any(greaterThanEqual(ipos, ires / 2 * 2))) return;

	vec2 uv = vec2(ipos) / vec2(ires);
	vec3 src = sample_13_tap(uv);
	if (luma_from_rgb(src) > 10.0) {
		ivec2 opos = ipos * 2;
		imageStore(o_tex, opos + ivec2(0, 0), vec4(src, 1.0));
		imageStore(o_tex, opos + ivec2(1, 0), vec4(src, 1.0));
		imageStore(o_tex, opos + ivec2(0, 1), vec4(src, 1.0));
		imageStore(o_tex, opos + ivec2(1, 1), vec4(src, 1.0));
	}
}
