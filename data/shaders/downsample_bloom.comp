#version 460
#extension GL_ARB_shading_language_include: enable
#pragma shader_stage(compute)
#include "common.glsl"

layout (constant_id = 0) const bool is_first_downsample = false;
layout (set = 0, binding = 0) uniform sampler2D i_tex;
layout (set = 0, binding = 1, rgba16f) uniform writeonly image2D o_tex;

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

float karis_average(vec3 v) {
	float l = luma_from_rgb(pow(v, vec3(1.0 / 2.2)) / 4.0;
	return 1.0 / (1.0 + l);
}

vec3 sample_13_tap(vec2 uv) {
	vec3 a = textureOffset(i_tex, uv, ivec2(-2,  2)).rgb;
	vec3 b = textureOffset(i_tex, uv, ivec2( 0,  2)).rgb;
	vec3 c = textureOffset(i_tex, uv, ivec2( 2,  2)).rgb;
	vec3 d = textureOffset(i_tex, uv, ivec2(-2,  0)).rgb;
	vec3 e = textureOffset(i_tex, uv, ivec2( 0,  0)).rgb;
	vec3 f = textureOffset(i_tex, uv, ivec2( 2,  0)).rgb;
	vec3 g = textureOffset(i_tex, uv, ivec2(-2, -2)).rgb;
	vec3 h = textureOffset(i_tex, uv, ivec2( 0, -2)).rgb;
	vec3 i = textureOffset(i_tex, uv, ivec2( 2, -2)).rgb;
	vec3 j = textureOffset(i_tex, uv, ivec2(-1,  1)).rgb;
	vec3 k = textureOffset(i_tex, uv, ivec2( 1,  1)).rgb;
	vec3 l = textureOffset(i_tex, uv, ivec2(-1, -1)).rgb;
	vec3 m = textureOffset(i_tex, uv, ivec2( 1, -1)).rgb;

	if (is_first_downsample) {
		vec3 group0 = (a + b + d + e) * (0.125 / 4.0);
		vec3 group1 = (b + c + e + f) * (0.125 / 4.0);
		vec3 group2 = (d + e + g + h) * (0.125 / 4.0);
		vec3 group3 = (e + f + h + i) * (0.125 / 4.0);
		vec3 group4 = (j + k + l + m) * (0.500 / 4.0);
		group0 *= karis_average(group0);
		group1 *= karis_average(group1);
		group2 *= karis_average(group2);
		group3 *= karis_average(group3);
		group4 *= karis_average(group4);
		return group0 + group1 + group2 + group3 + group4;
	} else {
		vec3 v = (a + c + g + i) * 0.03125;
		v += (b + d + f + h) * 0.0625;
		v += (e + j + k + l + m) * 0.125;
		return v;
	}
}

vec3 sample_3x3_tent(vec2 uv) {
	vec2 o = vec2(1.0, 1.0) / vec2(textureSize(i_tex, 0));
	vec3 a = texture(i_tex, uv + vec2(-o.x,  o.y)).rgb;
	vec3 b = texture(i_tex, uv + vec2(   0,  o.y)).rgb;
	vec3 c = texture(i_tex, uv + vec2( o.x,  o.y)).rgb;
	vec3 d = texture(i_tex, uv + vec2(-o.x,    0)).rgb;
	vec3 e = texture(i_tex, uv + vec2(   0,    0)).rgb;
	vec3 f = texture(i_tex, uv + vec2( o.x,    0)).rgb;
	vec3 g = texture(i_tex, uv + vec2(-o.x, -o.y)).rgb;
	vec3 h = texture(i_tex, uv + vec2(   0, -o.y)).rgb;
	vec3 i = texture(i_tex, uv + vec2( o.x, -o.y)).rgb;

	vec3 r = e * 0.25;
	r += (b + d + f + h) * 0.125;
	r += (a + c + g + i) * 0.0625;
	return r;
}
void main() {
	ivec2 ires = textureSize(i_tex, 0);
	ivec2 ores = imageSize(o_tex);

	ivec2 opos = ivec2(gl_GlobalInvocationID.xy);
	if (any(greaterThanEqual(opos, ores))) return;

	vec2 uv = vec2(opos) / vec2(ores);
	vec3 src = sample_3x3_tent(uv);
	imageStore(o_tex, opos, vec4(src * 0.4, 1.0));
}
