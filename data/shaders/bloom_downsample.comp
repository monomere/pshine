#version 460
#extension GL_ARB_shading_language_include: enable
#pragma shader_stage(compute)
#include "common.glsl"

layout (constant_id = 0) const bool is_first_downsample = false;
layout (set = 0, binding = 0) uniform sampler2D i_tex;
layout (set = 0, binding = 1, rgba16f) uniform writeonly image2D o_tex;

layout (push_constant) uniform BUFFER(GraphicsSettingsConsts, u_consts);

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

float karis_average(vec3 v) {
	float l = luma_from_rgb(pow(v, vec3(1.0 / 2.2))) / 4.0;
	return 1.0 / (1.0 + l);
}

vec3 quadratic_color_threshold(vec3 color, float threshold, float knee) {
	vec3 curve = vec3(threshold - knee, knee * 2.0, 0.25 / knee);
	float brightness = luma_from_rgb(color);

	// Under-threshold part: quadratic curve
	float rq = clamp(brightness - curve.x, 0.0, curve.y);
	rq = curve.z * rq * rq;

	// Combine and apply the brightness response curve.
	return color * max(rq, brightness - threshold) / max(brightness, EPSILON);
}

vec3 sample_13_tap(vec2 uv) {
	vec3 a = textureOffset(i_tex, uv, ivec2(-2,  2)).rgb;
	vec3 b = textureOffset(i_tex, uv, ivec2( 0,  2)).rgb;
	vec3 c = textureOffset(i_tex, uv, ivec2( 2,  2)).rgb;
	vec3 d = textureOffset(i_tex, uv, ivec2(-2,  0)).rgb;
	vec3 e = textureOffset(i_tex, uv, ivec2( 0,  0)).rgb;
	vec3 f = textureOffset(i_tex, uv, ivec2( 2,  0)).rgb;
	vec3 g = textureOffset(i_tex, uv, ivec2(-2, -2)).rgb;
	vec3 h = textureOffset(i_tex, uv, ivec2( 0, -2)).rgb;
	vec3 i = textureOffset(i_tex, uv, ivec2( 2, -2)).rgb;
	vec3 j = textureOffset(i_tex, uv, ivec2(-1,  1)).rgb;
	vec3 k = textureOffset(i_tex, uv, ivec2( 1,  1)).rgb;
	vec3 l = textureOffset(i_tex, uv, ivec2(-1, -1)).rgb;
	vec3 m = textureOffset(i_tex, uv, ivec2( 1, -1)).rgb;
	
	vec3 center_pixels = d + e + i + j;
  vec3 top_left = a + b + f + g;
  vec3 top_right = b + c + g + h;
  vec3 bottom_left = f + g + k + l;
  vec3 bottom_right = g + h + l + m;
	return center_pixels * 0.25 * 0.5 + (top_left + top_right + bottom_left + bottom_right) * 0.25 * 0.125;
}

vec3 sample_3x3_tent(vec2 uv) {
	vec2 o = vec2(1.0, 1.0) / vec2(textureSize(i_tex, 0));
	vec3 a = texture(i_tex, uv + vec2(-o.x,  o.y)).rgb;
	vec3 b = texture(i_tex, uv + vec2(   0,  o.y)).rgb;
	vec3 c = texture(i_tex, uv + vec2( o.x,  o.y)).rgb;
	vec3 d = texture(i_tex, uv + vec2(-o.x,    0)).rgb;
	vec3 e = texture(i_tex, uv + vec2(   0,    0)).rgb;
	vec3 f = texture(i_tex, uv + vec2( o.x,    0)).rgb;
	vec3 g = texture(i_tex, uv + vec2(-o.x, -o.y)).rgb;
	vec3 h = texture(i_tex, uv + vec2(   0, -o.y)).rgb;
	vec3 i = texture(i_tex, uv + vec2( o.x, -o.y)).rgb;

	return ((a + c + g + i) + (b + d + f + h) * 2.0 + e * 4.0) / 16.0;
}
void main() {
	ivec2 ires = textureSize(i_tex, 0);
	ivec2 ores = imageSize(o_tex);

	ivec2 opos = ivec2(gl_GlobalInvocationID.xy);
	if (any(greaterThanEqual(opos, ores))) return;

	vec2 uv = (vec2(opos) + vec2(0.5)) / vec2(ores);
	if (is_first_downsample) {
		vec3 src = sample_13_tap(uv);
		vec3 src_thresh = quadratic_color_threshold(src,
			u_consts.bloom_threshold, u_consts.bloom_knee);
		imageStore(o_tex, opos, vec4(src_thresh, 1.0));
	} else {
		vec3 src = sample_3x3_tent(uv);
		imageStore(o_tex, opos, vec4(src, 1.0));
	}
}
